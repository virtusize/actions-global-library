on:
  workflow_call:
    inputs:
      update-changelog:
        description: 'Update CHANGELOG.md with (Unreleased) version'
        required: false
        type: boolean
        default: true
      github-email:
        description: 'Git config user email'
        required: false
        type: string
        default: 'vs-polo@virtusize.com'
      github-user:
        description: 'Git config user name'
        required: false
        type: string
        default: 'vs-polo'

jobs:
  highest-version-tag:
    runs-on: macos-latest
    outputs:
      tag: ${{ steps.highest-version-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          # Allow tag to be fetched when ref is a commit
          fetch-depth: 0
      - name: Output highest version tag
        id: highest-version-tag
        run: |
          HIGHEST=$(git tag | sort -V | tail -1)
          echo ::set-output name=tag::$HIGHEST

  changelog-newversion:
      needs: [highest-version-tag]
      # write new changelog header only if release tag is the $HIGHEST i.e. exists on main
      # and not a backport release branch (e.g. release/3.x). This results in
      # manually updating the CHANGELOG header if releasing from the non-default branch.
      # TODO: find a more deterministic way to determine release branch from tag commit
      if: inputs.update-changelog && github.ref_name == needs.highest-version-tag.outputs.tag
      runs-on: macos-latest
      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0
            ref: main
        - name: Update Changelog Header
          run: |
            CHANGELOG_FILE_NAME="CHANGELOG.md"
            PREVIOUS_RELEASE_TAG=${{ github.ref_name }}

            # Add Release Date
            RELEASE_DATE=`date +%B' '%e', '%Y`
            sed -i -e "1 s/Unreleased/$RELEASE_DATE/" $CHANGELOG_FILE_NAME

            # Prepend next release line
            echo Previous release is: $PREVIOUS_RELEASE_TAG

            NEW_RELEASE_LINE=$(echo $PREVIOUS_RELEASE_TAG | awk -F. '{
                $1 = substr($1,2)
                $2 += 1
                printf("%s.%01d.0\n\n", $1, $2);
            }')

            echo New minor version is: v$NEW_RELEASE_LINE

            echo -e "## $NEW_RELEASE_LINE (Unreleased)\n$(cat $CHANGELOG_FILE_NAME)" > $CHANGELOG_FILE_NAME
        - run: |
              git config --local user.email ${{ inputs.github-email }}
              git config --local user.name ${{ inputs.github-user }}
              git add CHANGELOG.md
              git commit -m "Update CHANGELOG.md after ${{ github.ref_name }}"
              git push

  upload-tag-before-post-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Save Release Tag
        run: echo ${{ github.ref_name }} > release-tag.data
      - uses: actions/upload-artifact@v2
        with:
          name: release-tag
          path: release-tag.data
          retention-days: 1
